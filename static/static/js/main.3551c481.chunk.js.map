{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","componentDidMount","getChart","fetch","method","headers","then","res","json","resData","createLineGraph","catch","err","_data","_loader","_textStyle","fontName","color","italic","bold","_bgcolor","fill","opacity","_options","title","chartArea","backgroundColor","width","height","hAxis","textStyle","titleTextStyle","gridlines","minSpacing","vAxis","trendlines","0","type","degree","legend","fontSize","_chart","chartType","loader","data","options","rootProps","legendToggle","setState","chart","state","className","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"sRAqGeA,G,wDAhGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,kBAAoB,WAClB,EAAKC,YANY,EASnBA,SAAW,WACTC,MAAM,SAAU,CACdC,OAAQ,MACRC,QAAS,CAAC,eAAgB,sBAE3BC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GACJ,EAAKC,gBAAgBD,MACpBE,OAAM,SAAAC,GACP,MAAMA,KAER,EAAKF,gBAAgB,SApBJ,EAuBnBA,gBAAkB,SAAAD,GAChB,IAAII,EAAQJ,EAERK,EAAU,8CACVC,EAAa,CACfC,SAAU,SACVC,MAAO,UACPC,QAAQ,EACRC,MAAM,GAGJC,EAAW,CAACC,KAAM,UAAWC,QAAS,GACtCC,EAAW,CACbC,MAAO,sBACPC,UAAW,CACTC,gBAAiBN,EACjBO,MAAO,MACPC,OAAQ,OAEVD,MAAO,QACPC,OAAQ,QACRC,MAAO,CACLL,MAAO,MACPM,UAAWf,EACXgB,eAAgBhB,EAChBiB,UAAW,CAACf,MAAO,UAAWgB,WAAY,KAE5CC,MAAO,CACLV,MAAO,kBACPM,UAAWf,EACXgB,eAAgBhB,EAChBiB,UAAW,CAACf,MAAO,UAAWgB,WAAY,KAE5CE,WAAY,CACVC,EAAG,CACDC,KAAM,aACNC,OAAQ,IAGZC,OAAQ,CACNT,UAAWf,EACXgB,eAAgBhB,GAElBW,gBAAiBN,EACjBU,UAAWf,EACXgB,eAAe,eAAKhB,EAAN,GAAqB,CAACyB,SAAU,QAG5CC,EAAU,kBAAC,IAAD,CACZC,UAAU,YACVC,OAAQ7B,EACR8B,KAAM/B,EACNgC,QAAStB,EACTuB,UAAW,CAAE,cAAe,KAC5BC,cAAY,IAGd,EAAKC,SAAS,CAACC,MAAOR,KA9EtB,EAAKS,MAAQ,GAFI,E,qDAqFjB,OACE,yBAAKC,UAAU,OACb,8CACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QAAQC,KAAKF,MAAMD,a,GA1F1BI,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEdzD,OAAM,SAAA0D,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3551c481.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Chart from \"react-google-charts\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount = () => {\n    this.getChart();\n  }\n\n  getChart = () => {\n    fetch('/stats', {\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'},\n    })\n    .then(res=> res.json())\n    .then(resData => {\n      this.createLineGraph(resData);\n    }).catch(err => {\n      throw(err);\n    });\n    this.createLineGraph(\"test\");\n  }\n\n  createLineGraph = resData => {\n    let _data = resData;\n\n    let _loader = <div>Loading Chart</div>\n    let _textStyle = {\n      fontName: 'Roboto',\n      color: '#ECEEED',\n      italic: false,\n      bold: true\n    }\n\n    let _bgcolor = {fill: '#344055', opacity: 0}\n    let _options = {\n      title: 'COVID-19 Statistics',\n      chartArea: {\n        backgroundColor: _bgcolor,\n        width: '50%',\n        height: '70%'\n      },\n      width: '700px',\n      height: '600px',\n      hAxis: {\n        title: 'Day',\n        textStyle: _textStyle,\n        titleTextStyle: _textStyle,\n        gridlines: {color: '#465164', minSpacing: 20}\n      },\n      vAxis: {\n        title: 'Number of Cases',\n        textStyle: _textStyle,\n        titleTextStyle: _textStyle,\n        gridlines: {color: '#465164', minSpacing: 40}\n      },\n      trendlines: {\n        0: {\n          type: 'polynomial',\n          degree: 3\n        }\n      },\n      legend: {\n        textStyle: _textStyle,\n        titleTextStyle: _textStyle\n      },\n      backgroundColor: _bgcolor,       \n      textStyle: _textStyle,\n      titleTextStyle: {..._textStyle, ...{fontSize: '18'}}\n    };\n\n    let _chart = (<Chart\n      chartType=\"LineChart\"\n      loader={_loader}\n      data={_data}\n      options={_options}\n      rootProps={{ 'data-testid': '2' }}\n      legendToggle\n    />)\n\n    this.setState({chart: _chart});\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>COVID-19 Stats</h1>\n        <div className='Dashboard'>\n          <div className='Card'>{this.state.chart}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}