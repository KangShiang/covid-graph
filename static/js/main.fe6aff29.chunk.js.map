{"version":3,"sources":["countries.js","components/chart/index.js","components/selectBox/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","countries","CovidChart","props","_data","data","_loader","_textStyle","fontName","color","italic","bold","_bgcolor","fill","opacity","_options","title","chartArea","backgroundColor","width","height","hAxis","textStyle","titleTextStyle","gridlines","minSpacing","vAxis","trendlines","0","type","degree","legend","fontSize","chartType","loader","options","rootProps","legendToggle","require","SelectBox","componentDidMount","query","getQuery","state","getChart","updateList","e","setState","input","target","value","createSelectTable","selectList","country","startsWith","push","createAccordion","checkBox","createCheckBox","provincesList","getProvincesDiv","countryButton","createCountryButton","key","className","createProvincesList","province","labelText","checkValue","Form","Check","onChange","handleChange","label","checked","id","min","getAttribute","add2Provinces","checkCountry","removeFrmProvinces","setAllProvinces","provincesObj","tmpProvinces","prov","countryObj","tmpCountry","provinces","allProvincesChecked","provinceList","Object","values","currentSelectList","out","length","join","onClick","toggleProvinces","getRangeSelect","Group","Label","Control","max","assign","this","rangeSelect","Component","App","undefined","fetch","method","headers","then","res","json","resData","chart","catch","err","toString","selectBar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.fe6aff29.chunk.js","sourcesContent":["const countries = {\"east timor\": {\"checked\": false}, \"congo (kinshasa)\": {\"checked\": false}, \"japan\": {\"checked\": false}, \"kosovo\": {\"checked\": false}, \"azerbaijan\": {\"checked\": false}, \"uzbekistan\": {\"checked\": false}, \"senegal\": {\"checked\": false}, \"cambodia\": {\"checked\": false}, \"hungary\": {\"checked\": false}, \"eswatini\": {\"checked\": false}, \"cyprus\": {\"checked\": false}, \"barbados\": {\"checked\": false}, \"bhutan\": {\"checked\": false}, \"bahamas, the\": {\"checked\": false}, \"lithuania\": {\"checked\": false}, \"mongolia\": {\"checked\": false}, \"andorra\": {\"checked\": false}, \"tunisia\": {\"checked\": false}, \"congo (brazzaville)\": {\"checked\": false}, \"rwanda\": {\"checked\": false}, \"liberia\": {\"checked\": false}, \"argentina\": {\"checked\": false}, \"norway\": {\"checked\": false}, \"bahrain\": {\"checked\": false}, \"belarus\": {\"checked\": false}, \"cuba\": {\"checked\": false}, \"zambia\": {\"checked\": false}, \"guatemala\": {\"checked\": false}, \"netherlands\": {\"provinces\": {\"sint maarten\": false, \"aruba\": false, \"curacao\": false}, \"checked\": false, \"flag\": false}, \"belgium\": {\"checked\": false}, \"haiti\": {\"checked\": false}, \"kazakhstan\": {\"checked\": false}, \"burkina faso\": {\"checked\": false}, \"holy see\": {\"checked\": false}, \"mauritania\": {\"checked\": false}, \"kyrgyzstan\": {\"checked\": false}, \"suriname\": {\"checked\": false}, \"bosnia\": {\"checked\": false}, \"denmark\": {\"provinces\": {\"faroe islands\": false, \"greenland\": false}, \"checked\": false, \"flag\": false}, \"philippines\": {\"checked\": false}, \"korea, south\": {\"checked\": false}, \"moldova\": {\"checked\": false}, \"latvia\": {\"checked\": false}, \"croatia\": {\"checked\": false}, \"chad\": {\"checked\": false}, \"switzerland\": {\"checked\": false}, \"guinea\": {\"checked\": false}, \"bulgaria\": {\"checked\": false}, \"jamaica\": {\"checked\": false}, \"albania\": {\"checked\": false}, \"honduras\": {\"checked\": false}, \"lebanon\": {\"checked\": false}, \"north macedonia\": {\"checked\": false}, \"malaysia\": {\"checked\": false}, \"greece\": {\"checked\": false}, \"nicaragua\": {\"checked\": false}, \"niger\": {\"checked\": false}, \"canada\": {\"provinces\": {\"ontario\": false, \"newfoundland and labrador\": false, \"saskatchewan\": false, \"prince edward island\": false, \"british columbia\": false, \"nova scotia\": false, \"quebec\": false, \"grand princess\": false, \"alberta\": false, \"manitoba\": false, \"northwest territories\": false, \"new brunswick\": false}, \"checked\": false, \"flag\": false}, \"afghanistan\": {\"checked\": false}, \"qatar\": {\"checked\": false}, \"equatorial guinea\": {\"checked\": false}, \"sudan\": {\"checked\": false}, \"kuwait\": {\"checked\": false}, \"panama\": {\"checked\": false}, \"nepal\": {\"checked\": false}, \"central african republic\": {\"checked\": false}, \"luxembourg\": {\"checked\": false}, \"zimbabwe\": {\"checked\": false}, \"somalia\": {\"checked\": false}, \"namibia\": {\"checked\": false}, \"venezuela\": {\"checked\": false}, \"saint lucia\": {\"checked\": false}, \"brunei\": {\"checked\": false}, \"iran\": {\"checked\": false}, \"madagascar\": {\"checked\": false}, \"sri lanka\": {\"checked\": false}, \"china\": {\"provinces\": {\"beijing\": false, \"shandong\": false, \"hunan\": false, \"guangxi\": false, \"qinghai\": false, \"jiangsu\": false, \"ningxia\": false, \"sichuan\": false, \"liaoning\": false, \"inner mongolia\": false, \"guangdong\": false, \"jilin\": false, \"shanxi\": false, \"anhui\": false, \"macau\": false, \"tianjin\": false, \"shanghai\": false, \"gansu\": false, \"hebei\": false, \"hainan\": false, \"tibet\": false, \"yunnan\": false, \"hubei\": false, \"zhejiang\": false, \"heilongjiang\": false, \"chongqing\": false, \"xinjiang\": false, \"shaanxi\": false, \"henan\": false, \"guizhou\": false, \"jiangxi\": false, \"hong kong\": false, \"fujian\": false}, \"checked\": false, \"flag\": false}, \"armenia\": {\"checked\": false}, \"thailand\": {\"checked\": false}, \"iraq\": {\"checked\": false}, \"djibouti\": {\"checked\": false}, \"bangladesh\": {\"checked\": false}, \"ukraine\": {\"checked\": false}, \"trinidad and tobago\": {\"checked\": false}, \"oman\": {\"checked\": false}, \"finland\": {\"checked\": false}, \"mauritius\": {\"checked\": false}, \"antigua and barbuda\": {\"checked\": false}, \"dominican republic\": {\"checked\": false}, \"pakistan\": {\"checked\": false}, \"romania\": {\"checked\": false}, \"seychelles\": {\"checked\": false}, \"czech republic\": {\"checked\": false}, \"egypt\": {\"checked\": false}, \"papua new guinea\": {\"checked\": false}, \"cabo verde\": {\"checked\": false}, \"austria\": {\"checked\": false}, \"colombia\": {\"checked\": false}, \"angola\": {\"checked\": false}, \"new zealand\": {\"checked\": false}, \"fiji\": {\"checked\": false}, \"turkey\": {\"checked\": false}, \"saudi arabia\": {\"checked\": false}, \"portugal\": {\"checked\": false}, \"usa\": {\"provinces\": {\"cuyahoga, oh\": false, \"williamson county, tn\": false, \"madera county, ca\": false, \"alameda county, ca\": false, \"washoe county, nv\": false, \"king county, wa\": false, \"jefferson county, wa\": false, \"howard, in\": false, \"rhode island\": false, \"calaveras, ca\": false, \"socorro, nm\": false, \"montgomery county, pa\": false, \"monroe, pa\": false, \"st. louis county, mo\": false, \"monmouth, nj\": false, \"saratoga county, ny\": false, \"nevada\": false, \"noble, in\": false, \"maine\": false, \"essex, ma\": false, \"fayette, ga\": false, \"wyoming\": false, \"minnesota\": false, \"u.s. virgin islands\": false, \"honolulu county, hi\": false, \"fairfield, ct\": false, \"lake, il\": false, \"puerto rico\": false, \"arkansas\": false, \"maryland\": false, \"spartanburg county, sc\": false, \"polk county, ga\": false, \"texas\": false, \"arlington, va\": false, \"iowa\": false, \"santa rosa county, fl\": false, \"grand princess\": false, \"michigan\": false, \"dallas, tx\": false, \"utah\": false, \"virginia\": false, \"bon homme, sd\": false, \"jefferson parish, la\": false, \"johnson county, ia\": false, \"prince george's, md\": false, \"san mateo, ca\": false, \"davis county, ut\": false, \"st. joseph, in\": false, \"minnehaha, sd\": false, \"new york county, ny\": false, \"bucks, pa\": false, \"spotsylvania, va\": false, \"summit county, co\": false, \"hillsborough, fl\": false, \"multnomah, or\": false, \"nassau county, ny\": false, \"davidson county, tn\": false, \"maricopa county, az\": false, \"hawaii\": false, \"clark county, nv\": false, \"district of columbia\": false, \"missouri\": false, \"davison, sd\": false, \"ohio\": false, \"umatilla, or\": false, \"tulsa county, ok\": false, \"shelby county, tn\": false, \"clark county, wa\": false, \"middlesex, nj\": false, \"san francisco county, ca\": false, \"fulton county, ga\": false, \"douglas county, ne\": false, \"weber, ut\": false, \"polk, or\": false, \"san joaquin, ca\": false, \"diamond princess\": false, \"dane, wi\": false, \"stark, oh\": false, \"el paso county, co\": false, \"bergen county, nj\": false, \"middlesex county, ma\": false, \"marion county, in\": false, \"pinal county, az\": false, \"montgomery, tx\": false, \"jackson county, or\": false, \"oklahoma\": false, \"delaware\": false, \"litchfield, ct\": false, \"ventura, ca\": false, \"suffolk county, ny\": false, \"philadelphia, pa\": false, \"rockingham county, nh\": false, \"harrison county, ky\": false, \"burlington, nj\": false, \"manatee county, fl\": false, \"cobb county, ga\": false, \"arizona\": false, \"wisconsin\": false, \"delaware county, pa\": false, \"hendricks county, in\": false, \"humboldt county, ca\": false, \"denver county, co\": false, \"california\": false, \"new mexico\": false, \"douglas county, or\": false, \"deschutes, or\": false, \"johnson, in\": false, \"anoka, mn\": false, \"jefferson county, ky\": false, \"arapahoe, co\": false, \"pinellas, fl\": false, \"ulster county, ny\": false, \"floyd, ga\": false, \"fresno county, ca\": false, \"chatham county, nc\": false, \"pima, az\": false, \"island, wa\": false, \"kittitas county, wa\": false, \"montgomery county, md\": false, \"kershaw county, sc\": false, \"florida\": false, \"alaska\": false, \"napa, ca\": false, \"pottawattamie, ia\": false, \"los angeles, ca\": false, \"new castle, de\": false, \"san diego county, ca\": false, \"cherokee county, ga\": false, \"lancaster, sc\": false, \"san benito, ca\": false, \"charles mix, sd\": false, \"charlton, ga\": false, \"solano, ca\": false, \"rockland county, ny\": false, \"colorado\": false, \"adams, in\": false, \"orleans, la\": false, \"guam\": false, \"washington\": false, \"marin, ca\": false, \"lee county, fl\": false, \"fort bend county, tx\": false, \"tennessee\": false, \"shasta county, ca\": false, \"providence county, ri\": false, \"nassau, fl\": false, \"north dakota\": false, \"mississippi\": false, \"south dakota\": false, \"gwinnett, ga\": false, \"passaic, nj\": false, \"new jersey\": false, \"westchester county, ny\": false, \"north carolina\": false, \"riverside county, ca\": false, \"pasco, fl\": false, \"new york\": false, \"indiana\": false, \"mchenry, il\": false, \"louisiana\": false, \"broward county, fl\": false, \"union, nj\": false, \"wake county, nc\": false, \"loudoun, va\": false, \"harford county, md\": false, \"oregon\": false, \"hanover, va\": false, \"connecticut\": false, \"skagit, wa\": false, \"pierce county, wa\": false, \"yolo county, ca\": false, \"pennington, sd\": false, \"hudson county, nj\": false, \"marion county, or\": false, \"santa clara county, ca\": false, \"larimer, co\": false, \"georgia\": false, \"summit, ut\": false, \"okaloosa county, fl\": false, \"pierce, wi\": false, \"dekalb, ga\": false, \"fairfax county, va\": false, \"whatcom, wa\": false, \"kentucky\": false, \"oakland, mi\": false, \"volusia county, fl\": false, \"nebraska\": false, \"new hampshire\": false, \"orange county, ca\": false, \"south carolina\": false, \"wayne, mi\": false, \"gregg, tx\": false, \"snohomish county, wa\": false, \"camden, nc\": false, \"collier, fl\": false, \"olmsted, mn\": false, \"camden, nj\": false, \"washington county, or\": false, \"eagle, co\": false, \"jefferson, co\": false, \"suffolk county, ma\": false, \"norfolk county, ma\": false, \"sonoma county, ca\": false, \"placer county, ca\": false, \"boone, in\": false, \"charleston county, sc\": false, \"carver county, mn\": false, \"norfolk, va\": false, \"kane, il\": false, \"sullivan, tn\": false, \"worcester, ma\": false, \"gunnison, co\": false, \"illinois\": false, \"thurston, wa\": false, \"santa cruz, ca\": false, \"idaho\": false, \"grant county, wa\": false, \"berkshire county, ma\": false, \"bennington county, vt\": false, \"collin county, tx\": false, \"washington, d.c.\": false, \"contra costa county, ca\": false, \"kansas\": false, \"cook county, il\": false, \"ramsey county, mn\": false, \"douglas county, co\": false, \"alachua, fl\": false, \"montana\": false, \"harris county, tx\": false, \"massachusetts\": false, \"fayette county, ky\": false, \"wayne county, pa\": false, \"klamath county, or\": false, \"beadle, sd\": false, \"sacramento county, ca\": false, \"vermont\": false, \"kitsap, wa\": false, \"pennsylvania\": false, \"bernalillo, nm\": false, \"tarrant, tx\": false, \"grafton county, nh\": false, \"stanislaus, ca\": false, \"west virginia\": false, \"charlotte county, fl\": false, \"alabama\": false, \"johnson county, ks\": false, \"knox, ne\": false}, \"checked\": false, \"flag\": false}, \"uruguay\": {\"checked\": false}, \"france\": {\"provinces\": {\"mayotte\": false, \"st martin\": false, \"new caledonia\": false, \"french polynesia\": false, \"french guiana\": false, \"reunion\": false, \"saint barthelemy\": false, \"guadeloupe\": false}, \"checked\": false, \"flag\": false}, \"slovakia\": {\"checked\": false}, \"peru\": {\"checked\": false}, \"nigeria\": {\"checked\": false}, \"bolivia\": {\"checked\": false}, \"ecuador\": {\"checked\": false}, \"israel\": {\"checked\": false}, \"ireland\": {\"checked\": false}, \"algeria\": {\"checked\": false}, \"serbia\": {\"checked\": false}, \"tanzania\": {\"checked\": false}, \"montenegro\": {\"checked\": false}, \"togo\": {\"checked\": false}, \"jordan\": {\"checked\": false}, \"chile\": {\"checked\": false}, \"martinique\": {\"checked\": false}, \"cruise ship\": {\"provinces\": {\"diamond princess\": false}, \"checked\": false, \"flag\": false}, \"spain\": {\"checked\": false}, \"georgia\": {\"checked\": false}, \"morocco\": {\"checked\": false}, \"sweden\": {\"checked\": false}, \"gambia, the\": {\"checked\": false}, \"gabon\": {\"checked\": false}, \"uk\": {\"provinces\": {\"isle of man\": false, \"montserrat\": false, \"cayman islands\": false, \"channel islands\": false, \"bermuda\": false, \"gibraltar\": false}, \"checked\": false, \"flag\": false}, \"guyana\": {\"checked\": false}, \"taiwan*\": {\"checked\": false}, \"russia\": {\"checked\": false}, \"ghana\": {\"checked\": false}, \"estonia\": {\"checked\": false}, \"mexico\": {\"checked\": false}, \"india\": {\"checked\": false}, \"australia\": {\"provinces\": {\"northern territory\": false, \"western australia\": false, \"australian capital territory\": false, \"victoria\": false, \"from diamond princess\": false, \"new south wales\": false, \"queensland\": false, \"tasmania\": false, \"south australia\": false}, \"checked\": false, \"flag\": false}, \"saint vincent and the grenadines\": {\"checked\": false}, \"uganda\": {\"checked\": false}, \"paraguay\": {\"checked\": false}, \"kenya\": {\"checked\": false}, \"uae\": {\"checked\": false}, \"cote d'ivoire\": {\"checked\": false}, \"italy\": {\"checked\": true}, \"south africa\": {\"checked\": false}, \"malta\": {\"checked\": false}, \"ethiopia\": {\"checked\": false}, \"cameroon\": {\"checked\": false}, \"benin\": {\"checked\": false}, \"brazil\": {\"checked\": false}, \"singapore\": {\"checked\": false}, \"iceland\": {\"checked\": false}, \"san marino\": {\"checked\": false}, \"costa rica\": {\"checked\": false}, \"slovenia\": {\"checked\": false}, \"germany\": {\"checked\": false}, \"eritrea\": {\"checked\": false}, \"maldives\": {\"checked\": false}, \"el salvador\": {\"checked\": false}, \"poland\": {\"checked\": false}, \"indonesia\": {\"checked\": false}, \"cape verde\": {\"checked\": false}, \"liechtenstein\": {\"checked\": false}, \"vietnam\": {\"checked\": false}, \"monaco\": {\"checked\": false}}\n\nmodule.exports = {countries} ","import React from 'react';\nimport Chart from \"react-google-charts\";\n\nfunction CovidChart(props) {\n    const _data = props.data;\n\n    const _loader = <div>Loading Chart</div>\n    const _textStyle = {\n      fontName: 'Roboto',\n      color: '#ECEEED',\n      italic: false,\n      bold: true\n    }\n\n    const _bgcolor = {fill: '#344055', opacity: 0}\n    const _options = {\n      title: 'COVID-19 Statistics',\n      chartArea: {\n        backgroundColor: _bgcolor,\n        width: '80%',\n        height: '80%'\n      },\n      width: '100%',\n      height: '100%',\n      hAxis: {\n        title: 'Day',\n        textStyle: _textStyle,\n        titleTextStyle: _textStyle,\n        gridlines: {color: '#465164', minSpacing: 10}\n      },\n      vAxis: {\n        title: 'Number of Cases',\n        textStyle: _textStyle,\n        titleTextStyle: _textStyle,\n        gridlines: {color: '#465164', minSpacing: 100}\n      },\n      trendlines: {\n        0: {\n          type: 'polynomial',\n          degree: 3\n        }\n      },\n      legend: {\n        textStyle: _textStyle,\n        titleTextStyle: _textStyle\n      },\n      backgroundColor: _bgcolor,       \n      textStyle: _textStyle,\n      titleTextStyle: {..._textStyle, ...{fontSize: '18'}}\n    };\n\n    return (\n        <Chart\n        chartType=\"LineChart\"\n        loader={_loader}\n        data={_data}\n        options={_options}\n        rootProps={{ 'data-testid': '2' }}\n        legendToggle\n        />\n    )\n}\n\nexport default CovidChart;","import React, {Component} from 'react';\nimport Form from 'react-bootstrap/Form';\nconst {countries} = require('../../countries');\n\nclass SelectBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = Object.assign(countries, {min: 0, input: ''});\n    }\n\n    componentDidMount = () => {\n        let query = this.getQuery(this.state);\n        this.props.getChart(query);\n    }\n\n    updateList = e =>{\n        this.setState({input: e.target.value});\n    }\n\n    createSelectTable = () => {\n        let selectList = [];\n        for (let country in this.state) {\n            if (country === 'input' || country === 'min') { continue }\n            if (this.state.input !== '' && !(country.startsWith(this.state.input))) { continue }\n            if ('provinces' in this.state[country]) {\n                selectList.push(this.createAccordion(country))\n            } else {\n                let checkBox = this.createCheckBox(country);\n                selectList.push(checkBox);\n            }\n        }\n        return selectList;\n    }\n\n    createAccordion = country => {\n        let provincesList = this.getProvincesDiv(country);\n        let countryButton = this.createCountryButton(country);\n        return ( \n          <div key={country}>\n            {countryButton}\n            <div className='provinces'>{provincesList}</div>\n          </div>\n        )\n    }\n\n    getProvincesDiv = country => {\n        if (this.state[country]['flag'] === false) { return <div></div> }\n        return this.createProvincesList(country);\n    }\n\n    createProvincesList = country => {\n        let provincesList = [];\n        for (let province in this.state[country]['provinces']) {\n          provincesList.push(this.createCheckBox(country, province));\n        }\n        return provincesList;\n    }\n\n    createCheckBox = (country, province) => {\n        let labelText = province? province: country;\n        let checkValue = province? this.state[country]['provinces'][province] : this.state[country]['checked'];\n        return (\n          <Form.Check \n            key={labelText} \n            type='checkbox' \n            onChange={e => {this.handleChange(e)}}\n            country={country} \n            province={province} \n            label={labelText} \n            checked={checkValue}/>\n        )\n    }\n\n    handleChange = e => {\n        let query = this.state;\n        if (e.target.id === 'min_count') {\n            query.min = e.target.value;\n        } else {\n            let country = e.target.getAttribute('country');\n            let province = e.target.getAttribute('province');\n            if (e.target.checked) {\n              if (province) {\n                query[country] = this.add2Provinces(query[country], province);\n              } else {\n                query[country] = this.checkCountry(query[country], true);\n              }\n            } else {\n              if (province) {\n                query[country] = this.removeFrmProvinces(query[country], province);\n              } else {\n                query[country] = this.checkCountry(query[country], false);\n              }\n            }\n        }\n\n        this.props.getChart(this.getQuery(query));\n    }\n\n\n    setAllProvinces = (provincesObj, value) => {\n        let tmpProvinces = provincesObj;\n        for (let prov in tmpProvinces) {\n            tmpProvinces[prov] = value;\n        }\n        return tmpProvinces;\n    }\n\n    add2Provinces = (countryObj, province) => {\n        let tmpCountry = countryObj;\n        tmpCountry.provinces[province] = true;\n        if (this.allProvincesChecked(tmpCountry.provinces)) { \n            tmpCountry.checked = true;\n        } \n        return tmpCountry;\n    }\n    \n    allProvincesChecked = provinceList => {\n        for (let checked of Object.values(provinceList)) {\n            if (checked === false) { return false }\n        }\n        return true;\n    }    \n\n    removeFrmProvinces = (countryObj, province) => {\n        let tmpCountry = countryObj;\n        tmpCountry.provinces[province] = false;\n        tmpCountry.checked = false;\n        return tmpCountry;\n    }\n\n    checkCountry = (countryObj, value) => {\n        let tmpCountry = countryObj;\n        tmpCountry.checked = value;\n        if ('provinces' in tmpCountry) {\n            tmpCountry.provinces = this.setAllProvinces(tmpCountry.provinces, value)\n        }\n        return tmpCountry;       \n    }\n\n    getQuery = currentSelectList => {\n        let query = {country: [], province: []};\n        let out = [];\n        for (let country in currentSelectList) {\n            if (country === 'input' || country === 'min') { continue }\n            if (currentSelectList[country].checked === true) {\n                query.country.push(country);\n            } else {\n                if (!('provinces' in currentSelectList[country])) { continue }\n                for (let province in currentSelectList[country]['provinces']) {\n                    if (currentSelectList[country]['provinces'][province] === true) {\n                        query.province.push(country+'-'+province);\n                    }\n                }\n            }\n        }\n        out.push('min=' + currentSelectList.min);\n        if (query.country.length > 0) {\n            out.push('country=' + query.country.join('--'));\n        }\n        if (query.province.length > 0) {\n            out.push('province=' + query.province.join('--'));\n        }\n        return out.join('&');\n    }\n\n    createCountryButton = country => {\n        let checkBox = this.createCheckBox(country);\n        return (\n            <div className='country-btn'>\n                {checkBox}\n                <button type='button' onClick={() => {this.toggleProvinces(country)}}><i className=\"fas fa-angle-down\"></i></button>\n            </div>\n            )\n        }\n    \n    toggleProvinces = country => {\n        let tmpCountry = this.state[country];\n        tmpCountry['flag'] = !(this.state[country]['flag']);\n\n        this.setState({[country]: tmpCountry});\n    }   \n\n    getRangeSelect = () => {\n        return (\n            <Form.Group className=\"minRangeSelector\">\n                <Form.Label>SELECT MIN CASES:</Form.Label>\n                <Form.Control  type=\"range\" id=\"min_count\" min='0' max='2000' value={this.state.min} onChange={e => {this.handleChange(e)}} />\n            </Form.Group>\n        )\n    }\n\n    render() {\n        let selectList = this.createSelectTable();\n        let rangeSelect = this.getRangeSelect();\n        return(\n            <div className='SelectBox'>\n                {rangeSelect}\n                <input type='text' onChange={e => {this.updateList(e)}} className=\"searchInput\" />\n                <div className=\"CountriesList\">{selectList}</div>\n            </div>\n        )\n    }\n\n}\n\nexport default SelectBox;\n","import React, {Component} from 'react';\nimport CovidChart from './components/chart';\nimport SelectTable from './components/selectBox';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { chart: null };\n  }\n\n  getChart = query => {\n    if (query === undefined || query.length < 1){ return }\n    fetch(`/stats?${query}`, {\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'},\n    })\n    .then(res=> res.json())\n    .then(resData => {\n      this.setState({chart: <CovidChart data={resData} />})\n    }).catch(err => { \n      this.setState({chart: err.toString()});\n      });\n  }\n\n  render() {\n    let selectBar = <SelectTable getChart={this.getChart} />\n    return (\n      <div className=\"App\">\n        <h1>COVID-19 Stats</h1>\n        <div className='Dashboard'>\n          <div className='Card'>{this.state.chart}</div>\n          {selectBar}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}